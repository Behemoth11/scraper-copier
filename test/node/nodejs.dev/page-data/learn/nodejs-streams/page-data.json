{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/nodejs-streams","result":{"data":{"doc":{"id":"84ccacc8-cb6e-5719-89b8-4a3136ad8e7d","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Node.js Streams\",\n  \"description\": \"Learn what streams are for, why are they so important, and how to use them.\",\n  \"authors\": \"flaviocopes, MylesBorins, fhemberger, LaRuaNa, amiller-gh, r0mflip, ahmadawais, 19shubham11\",\n  \"section\": \"Getting Started\",\n  \"category\": \"learn\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"what-are-streams\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#what-are-streams\",\n    \"aria-label\": \"what are streams permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"What are streams\"), mdx(\"p\", null, \"Streams are one of the fundamental concepts that power Node.js applications.\"), mdx(\"p\", null, \"They are a way to handle reading/writing files, network communications, or any kind of end-to-end information exchange in an efficient way.\"), mdx(\"p\", null, \"Streams are not a concept unique to Node.js. They were introduced in the Unix operating system decades ago, and programs can interact with each other passing streams through the pipe operator (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|\"), \").\"), mdx(\"p\", null, \"For example, in the traditional way, when you tell the program to read a file, the file is read into memory, from start to finish, and then you process it.\"), mdx(\"p\", null, \"Using streams you read it piece by piece, processing its content without keeping it all in memory.\"), mdx(\"p\", null, \"The Node.js \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/api/stream.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"stream\"), \" module\"), \" provides the foundation upon which all streaming APIs are built.\\nAll streams are instances of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/api/events.html#events_class_eventemitter\"\n  }, \"EventEmitter\")), mdx(\"h2\", {\n    \"id\": \"why-streams\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#why-streams\",\n    \"aria-label\": \"why streams permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Why streams\"), mdx(\"p\", null, \"Streams basically provide two major advantages over using other data handling methods:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Memory efficiency\"), \": you don't need to load large amounts of data in memory before you are able to process it\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Time efficiency\"), \": it takes way less time to start processing data, since you can start processing as soon as you have it, rather than waiting till the whole data payload is available\")), mdx(\"h2\", {\n    \"id\": \"an-example-of-a-stream\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#an-example-of-a-stream\",\n    \"aria-label\": \"an example of a stream permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"An example of a stream\"), mdx(\"p\", null, \"A typical example is reading files from a disk.\"), mdx(\"p\", null, \"Using the Node.js \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fs\"), \" module, you can read a file, and serve it over HTTP when a new connection is established to your HTTP server:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const http = require('http')\\nconst fs = require('fs')\\n\\nconst server = http.createServer(function(req, res) {\\n  fs.readFile(__dirname + '/data.txt', (err, data) => {\\n    res.end(data)\\n  })\\n})\\nserver.listen(3000)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readFile()\"), \" reads the full contents of the file, and invokes the callback function when it's done.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"res.end(data)\"), \" in the callback will return the file contents to the HTTP client.\"), mdx(\"p\", null, \"If the file is big, the operation will take quite a bit of time. Here is the same thing written using streams:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const http = require('http')\\nconst fs = require('fs')\\n\\nconst server = http.createServer((req, res) => {\\n  const stream = fs.createReadStream(__dirname + '/data.txt')\\n  stream.pipe(res)\\n})\\nserver.listen(3000)\\n\")), mdx(\"p\", null, \"Instead of waiting until the file is fully read, we start streaming it to the HTTP client as soon as we have a chunk of data ready to be sent.\"), mdx(\"h2\", {\n    \"id\": \"pipe\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#pipe\",\n    \"aria-label\": \"pipe permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"pipe()\"), mdx(\"p\", null, \"The above example uses the line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stream.pipe(res)\"), \": the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe()\"), \" method is called on the file stream.\"), mdx(\"p\", null, \"What does this code do? It takes the source, and pipes it into a destination.\"), mdx(\"p\", null, \"You call it on the source stream, so in this case, the file stream is piped to the HTTP response.\"), mdx(\"p\", null, \"The return value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe()\"), \" method is the destination stream, which is a very convenient thing that lets us chain multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe()\"), \" calls, like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"src.pipe(dest1).pipe(dest2)\\n\")), mdx(\"p\", null, \"This construct is the same as doing\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"src.pipe(dest1)\\ndest1.pipe(dest2)\\n\")), mdx(\"h2\", {\n    \"id\": \"streams-powered-nodejs-apis\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#streams-powered-nodejs-apis\",\n    \"aria-label\": \"streams powered nodejs apis permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Streams-powered Node.js APIs\"), mdx(\"p\", null, \"Due to their advantages, many Node.js core modules provide native stream handling capabilities, most notably:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process.stdin\"), \" returns a stream connected to stdin\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process.stdout\"), \" returns a stream connected to stdout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"process.stderr\"), \" returns a stream connected to stderr\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fs.createReadStream()\"), \" creates a readable stream to a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fs.createWriteStream()\"), \" creates a writable stream to a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"net.connect()\"), \" initiates a stream-based connection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http.request()\"), \" returns an instance of the http.ClientRequest class, which is a writable stream\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zlib.createGzip()\"), \" compress data using gzip (a compression algorithm) into a stream\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zlib.createGunzip()\"), \" decompress a gzip stream.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zlib.createDeflate()\"), \" compress data using deflate (a compression algorithm) into a stream\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zlib.createInflate()\"), \" decompress a deflate stream\")), mdx(\"h2\", {\n    \"id\": \"different-types-of-streams\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#different-types-of-streams\",\n    \"aria-label\": \"different types of streams permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Different types of streams\"), mdx(\"p\", null, \"There are four classes of streams:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Readable\"), \": a stream you can pipe from, but not pipe into (you can receive data, but not send data to it). When you push data into a readable stream, it is buffered, until a consumer starts to read the data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Writable\"), \": a stream you can pipe into, but not pipe from (you can send data, but not receive from it)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Duplex\"), \": a stream you can both pipe into and pipe from, basically a combination of a Readable and Writable stream\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Transform\"), \": a Transform stream is similar to a Duplex, but the output is a transform of its input\")), mdx(\"h2\", {\n    \"id\": \"how-to-create-a-readable-stream\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-to-create-a-readable-stream\",\n    \"aria-label\": \"how to create a readable stream permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How to create a readable stream\"), mdx(\"p\", null, \"We get the Readable stream from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/api/stream.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"stream\"), \" module\"), \", and we initialize it and implement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readable._read()\"), \" method.\"), mdx(\"p\", null, \"First create a stream object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const Stream = require('stream')\\nconst readableStream = new Stream.Readable()\\n\")), mdx(\"p\", null, \"then implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_read\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"readableStream._read = () => {}\\n\")), mdx(\"p\", null, \"You can also implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_read\"), \" using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"read\"), \" option:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const readableStream = new Stream.Readable({\\n  read() {}\\n})\\n\")), mdx(\"p\", null, \"Now that the stream is initialized, we can send data to it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"readableStream.push('hi!')\\nreadableStream.push('ho!')\\n\")), mdx(\"h2\", {\n    \"id\": \"how-to-create-a-writable-stream\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-to-create-a-writable-stream\",\n    \"aria-label\": \"how to create a writable stream permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How to create a writable stream\"), mdx(\"p\", null, \"To create a writable stream we extend the base \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Writable\"), \" object, and we implement its \", \"_\", \"write() method.\"), mdx(\"p\", null, \"First create a stream object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const Stream = require('stream')\\nconst writableStream = new Stream.Writable()\\n\")), mdx(\"p\", null, \"then implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_write\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"writableStream._write = (chunk, encoding, next) => {\\n  console.log(chunk.toString())\\n  next()\\n}\\n\")), mdx(\"p\", null, \"You can now pipe a\\nreadable stream in:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"process.stdin.pipe(writableStream)\\n\")), mdx(\"h2\", {\n    \"id\": \"how-to-get-data-from-a-readable-stream\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-to-get-data-from-a-readable-stream\",\n    \"aria-label\": \"how to get data from a readable stream permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How to get data from a readable stream\"), mdx(\"p\", null, \"How do we read data from a readable stream? Using a writable stream:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const Stream = require('stream')\\n\\nconst readableStream = new Stream.Readable({\\n  read() {}\\n})\\nconst writableStream = new Stream.Writable()\\n\\nwritableStream._write = (chunk, encoding, next) => {\\n  console.log(chunk.toString())\\n  next()\\n}\\n\\nreadableStream.pipe(writableStream)\\n\\nreadableStream.push('hi!')\\nreadableStream.push('ho!')\\n\")), mdx(\"p\", null, \"You can also consume a readable stream directly, using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readable\"), \" event:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"readableStream.on('readable', () => {\\n  console.log(readableStream.read())\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"how-to-send-data-to-a-writable-stream\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-to-send-data-to-a-writable-stream\",\n    \"aria-label\": \"how to send data to a writable stream permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How to send data to a writable stream\"), mdx(\"p\", null, \"Using the stream \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"write()\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"writableStream.write('hey!\\\\n')\\n\")), mdx(\"h2\", {\n    \"id\": \"signaling-a-writable-stream-that-you-ended-writing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#signaling-a-writable-stream-that-you-ended-writing\",\n    \"aria-label\": \"signaling a writable stream that you ended writing permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Signaling a writable stream that you ended writing\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end()\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const Stream = require('stream')\\n\\nconst readableStream = new Stream.Readable({\\n  read() {}\\n})\\nconst writableStream = new Stream.Writable()\\n\\nwritableStream._write = (chunk, encoding, next) => {\\n  console.log(chunk.toString())\\n  next()\\n}\\n\\nreadableStream.pipe(writableStream)\\n\\nreadableStream.push('hi!')\\nreadableStream.push('ho!')\\n\\nreadableStream.on('close', () => writableStream.end())\\nwritableStream.on('close', () => console.log('ended'))\\n\\nreadableStream.destroy()\\n\")), mdx(\"p\", null, \"In the above example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end()\"), \" is called within a listener to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"close\"), \" event on the readable stream to ensure it is not called before all write events have passed through the pipe, as doing so would cause an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" event to be emitted.\\nCalling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"destroy()\"), \" on the readable stream causes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"close\"), \" event to be emitted.\\nThe listener to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"close\"), \" event on the writable stream demonstrates the completion of the process as it is emitted after the call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end()\"), \".\"), mdx(\"h2\", {\n    \"id\": \"how-to-create-a-transform-stream\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-to-create-a-transform-stream\",\n    \"aria-label\": \"how to create a transform stream permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How to create a transform stream\"), mdx(\"p\", null, \"We get the Transform stream from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/api/stream.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"stream\"), \" module\"), \", and we initialize it and implement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transform._transform()\"), \" method.\"), mdx(\"p\", null, \"First create a transform stream object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const { Transform } = require('stream')\\nconst transformStream = new Transform();\\n\")), mdx(\"p\", null, \"then implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_transform\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"transformStream._transform = (chunk, encoding, callback) => {\\n  transformStream.push(chunk.toString().toUpperCase());\\n  callback();\\n}\\n\")), mdx(\"p\", null, \"Pipe readable stream:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"process.stdin.pipe(transformStream).pipe(process.stdout);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-are-streams","title":"What are streams"},{"url":"#why-streams","title":"Why streams"},{"url":"#an-example-of-a-stream","title":"An example of a stream"},{"url":"#pipe","title":"pipe()"},{"url":"#streams-powered-nodejs-apis","title":"Streams-powered Node.js APIs"},{"url":"#different-types-of-streams","title":"Different types of streams"},{"url":"#how-to-create-a-readable-stream","title":"How to create a readable stream"},{"url":"#how-to-create-a-writable-stream","title":"How to create a writable stream"},{"url":"#how-to-get-data-from-a-readable-stream","title":"How to get data from a readable stream"},{"url":"#how-to-send-data-to-a-writable-stream","title":"How to send data to a writable stream"},{"url":"#signaling-a-writable-stream-that-you-ended-writing","title":"Signaling a writable stream that you ended writing"},{"url":"#how-to-create-a-transform-stream","title":"How to create a transform stream"}]},"frontmatter":{"title":"Node.js Streams","description":"Learn what streams are for, why are they so important, and how to use them."},"fields":{"slug":"nodejs-streams","authors":["flaviocopes"," MylesBorins"," fhemberger"," LaRuaNa"," amiller-gh"," r0mflip"," ahmadawais"," 19shubham11"]}}},"pageContext":{"slug":"nodejs-streams","next":{"slug":"nodejs-the-difference-between-development-and-production","title":"Node.js, the difference between development and production"},"previous":{"slug":"nodejs-buffers","title":"Node.js Buffers"},"relativePath":"0052-nodejs-streams/index.md","category":"learn","navigationData":{"null":{"data":[{"title":"Releases","slug":"releases","section":null,"category":"releases"},{"title":"mock","slug":"/blog/0000/00/00/mock","section":null,"category":"blog"},{"title":"Installing Node.js via package manager","slug":"installing-nodejs-via-package-manager","section":null,"category":"download"},{"title":"Benchmarking","slug":"benchmarking","section":null,"category":null},{"title":"metrics","slug":"metrics","section":null,"category":null}],"category":"releases"},"Quick Start":{"data":[{"title":"Introduction to Node.js","slug":"introduction-to-nodejs","section":"Quick Start","category":"learn"},{"title":"A brief history of Node.js","slug":"a-brief-history-of-nodejs","section":"Quick Start","category":"learn"},{"title":"How to install Node.js","slug":"how-to-install-nodejs","section":"Quick Start","category":"learn"},{"title":"How much JavaScript do you need to know to use Node.js?","slug":"how-much-javascript-do-you-need-to-know-to-use-nodejs","section":"Quick Start","category":"learn"},{"title":"Differences between Node.js and the Browser","slug":"differences-between-nodejs-and-the-browser","section":"Quick Start","category":"learn"}],"category":"learn"},"Getting Started":{"data":[{"title":"The V8 JavaScript Engine","slug":"the-v8-javascript-engine","section":"Getting Started","category":"learn"},{"title":"Run Node.js scripts from the command line","slug":"run-nodejs-scripts-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"How to exit from a Node.js program","slug":"how-to-exit-from-a-nodejs-program","section":"Getting Started","category":"learn"},{"title":"How to read environment variables from Node.js","slug":"how-to-read-environment-variables-from-nodejs","section":"Getting Started","category":"learn"},{"title":"How to use the Node.js REPL","slug":"how-to-use-the-nodejs-repl","section":"Getting Started","category":"learn"},{"title":"Node.js, accept arguments from the command line","slug":"nodejs-accept-arguments-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"Output to the command line using Node.js","slug":"output-to-the-command-line-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Accept input from the command line in Node.js","slug":"accept-input-from-the-command-line-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Expose functionality from a Node.js file using exports","slug":"expose-functionality-from-a-nodejs-file-using-exports","section":"Getting Started","category":"learn"},{"title":"An introduction to the npm package manager","slug":"an-introduction-to-the-npm-package-manager","section":"Getting Started","category":"learn"},{"title":"Where does npm install the packages?","slug":"where-does-npm-install-the-packages","section":"Getting Started","category":"learn"},{"title":"How to use or execute a package installed using npm","slug":"how-to-use-or-execute-a-package-installed-using-npm","section":"Getting Started","category":"learn"},{"title":"The package.json guide","slug":"the-package-json-guide","section":"Getting Started","category":"learn"},{"title":"The package-lock.json file","slug":"the-package-lock-json-file","section":"Getting Started","category":"learn"},{"title":"Find the installed version of an npm package","slug":"find-the-installed-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Install an older version of an npm package","slug":"install-an-older-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Update all the Node.js dependencies to their latest version","slug":"update-all-the-nodejs-dependencies-to-their-latest-version","section":"Getting Started","category":"learn"},{"title":"Semantic Versioning using npm","slug":"semantic-versioning-using-npm","section":"Getting Started","category":"learn"},{"title":"Uninstalling npm packages","slug":"uninstalling-npm-packages","section":"Getting Started","category":"learn"},{"title":"npm global or local packages","slug":"npm-global-or-local-packages","section":"Getting Started","category":"learn"},{"title":"npm dependencies and devDependencies","slug":"npm-dependencies-and-devdependencies","section":"Getting Started","category":"learn"},{"title":"The npx Node.js Package Runner","slug":"the-npx-nodejs-package-runner","section":"Getting Started","category":"learn"},{"title":"The Node.js Event Loop","slug":"the-nodejs-event-loop","section":"Getting Started","category":"learn"},{"title":"Understanding process.nextTick()","slug":"understanding-process-nexttick","section":"Getting Started","category":"learn"},{"title":"Understanding setImmediate()","slug":"understanding-setimmediate","section":"Getting Started","category":"learn"},{"title":"Discover JavaScript Timers","slug":"discover-javascript-timers","section":"Getting Started","category":"learn"},{"title":"JavaScript Asynchronous Programming and Callbacks","slug":"javascript-asynchronous-programming-and-callbacks","section":"Getting Started","category":"learn"},{"title":"Understanding JavaScript Promises","slug":"understanding-javascript-promises","section":"Getting Started","category":"learn"},{"title":"Modern Asynchronous JavaScript with Async and Await","slug":"modern-asynchronous-javascript-with-async-and-await","section":"Getting Started","category":"learn"},{"title":"The Node.js Event emitter","slug":"the-nodejs-event-emitter","section":"Getting Started","category":"learn"},{"title":"Build an HTTP Server","slug":"build-an-http-server","section":"Getting Started","category":"learn"},{"title":"Making HTTP requests with Node.js","slug":"making-http-requests-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Make an HTTP POST request using Node.js","slug":"make-an-http-post-request-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Get HTTP request body data using Node.js","slug":"get-http-request-body-data-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with file descriptors in Node.js","slug":"working-with-file-descriptors-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js file stats","slug":"nodejs-file-stats","section":"Getting Started","category":"learn"},{"title":"Node.js File Paths","slug":"nodejs-file-paths","section":"Getting Started","category":"learn"},{"title":"Reading files with Node.js","slug":"reading-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Writing files with Node.js","slug":"writing-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with folders in Node.js","slug":"working-with-folders-in-nodejs","section":"Getting Started","category":"learn"},{"title":"The Node.js fs module","slug":"the-nodejs-fs-module","section":"Getting Started","category":"learn"},{"title":"The Node.js path module","slug":"the-nodejs-path-module","section":"Getting Started","category":"learn"},{"title":"The Node.js os module","slug":"the-nodejs-os-module","section":"Getting Started","category":"learn"},{"title":"The Node.js events module","slug":"the-nodejs-events-module","section":"Getting Started","category":"learn"},{"title":"The Node.js http module","slug":"the-nodejs-http-module","section":"Getting Started","category":"learn"},{"title":"Node.js Buffers","slug":"nodejs-buffers","section":"Getting Started","category":"learn"},{"title":"Node.js Streams","slug":"nodejs-streams","section":"Getting Started","category":"learn"},{"title":"Node.js, the difference between development and production","slug":"nodejs-the-difference-between-development-and-production","section":"Getting Started","category":"learn"},{"title":"Error handling in Node.js","slug":"error-handling-in-nodejs","section":"Getting Started","category":"learn"},{"title":"How to log an object in Node.js","slug":"how-to-log-an-object-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js with TypeScript","slug":"nodejs-with-typescript","section":"Getting Started","category":"learn"},{"title":"Node.js with WebAssembly","slug":"nodejs-with-webassembly","section":"Getting Started","category":"learn"}],"category":"learn"}}}},"staticQueryHashes":[]}