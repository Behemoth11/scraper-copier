{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/output-to-the-command-line-using-nodejs","result":{"data":{"doc":{"id":"1cd4b8ad-cec3-55d9-949b-0ecd340960d8","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Output to the command line using Node.js\",\n  \"description\": \"How to print to the command line console using Node.js, from the basic console.log to more complex scenarios\",\n  \"authors\": \"flaviocopes, potch, MylesBorins, fhemberger, LaRuaNa, amiller-gh, ahmadawais\",\n  \"section\": \"Getting Started\",\n  \"category\": \"learn\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"basic-output-using-the-console-module\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#basic-output-using-the-console-module\",\n    \"aria-label\": \"basic output using the console module permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Basic output using the console module\"), mdx(\"p\", null, \"Node.js provides a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/api/console.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"console\"), \" module\"), \" which provides tons of very useful ways to interact with the command line.\"), mdx(\"p\", null, \"It is basically the same as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console\"), \" object you find in the browser.\"), mdx(\"p\", null, \"The most basic and most used method is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log()\"), \", which prints the string you pass to it to the console.\"), mdx(\"p\", null, \"If you pass an object, it will render it as a string.\"), mdx(\"p\", null, \"You can pass multiple variables to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \", for example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const x = 'x'\\nconst y = 'y'\\nconsole.log(x, y)\\n\")), mdx(\"p\", null, \"and Node.js will print both.\"), mdx(\"p\", null, \"We can also format pretty phrases by passing variables and a format specifier.\"), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log('My %s has %d years', 'cat', 2)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"%s\"), \" format a variable as a string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"%d\"), \" format a variable as a number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"%i\"), \" format a variable as its integer part only\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"%o\"), \" format a variable as an object\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log('%o', Number)\\n\")), mdx(\"h2\", {\n    \"id\": \"clear-the-console\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#clear-the-console\",\n    \"aria-label\": \"clear the console permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Clear the console\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.clear()\"), \" clears the console (the behavior might depend on the console used)\"), mdx(\"h2\", {\n    \"id\": \"counting-elements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#counting-elements\",\n    \"aria-label\": \"counting elements permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Counting elements\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.count()\"), \" is a handy method.\"), mdx(\"p\", null, \"Take this code:\"), mdx(\"iframe\", {\n    title: \"Output to the command line using Node.js\",\n    src: \"https://stackblitz.com/edit/nodejs-dev-0002-01?index.js&zenmode=1&view=editor\",\n    alt: \"nodejs-dev-0002-01 on StackBlitz\",\n    style: {\n      \"height\": \"400px\",\n      \"width\": \"100%\",\n      \"border\": \"0\"\n    }\n  }), mdx(\"p\", null, \"What happens is that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.count()\"), \" will count the number of times a string is printed, and print the count next to it:\"), mdx(\"p\", null, \"You can just count apples and oranges:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const oranges = ['orange', 'orange']\\nconst apples = ['just one apple']\\noranges.forEach(fruit => {\\n  console.count(fruit)\\n})\\napples.forEach(fruit => {\\n  console.count(fruit)\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"reset-counting\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#reset-counting\",\n    \"aria-label\": \"reset counting permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Reset counting\"), mdx(\"p\", null, \"The console.countReset() method resets counter used with console.count().\"), mdx(\"p\", null, \"We will use the apples and orange example to demonstrate this.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const oranges = ['orange', 'orange']\\nconst apples = ['just one apple']\\noranges.forEach(fruit => {\\n  console.count(fruit)\\n})\\napples.forEach(fruit => {\\n  console.count(fruit)\\n})\\n\\nconsole.countReset('orange')\\n\\noranges.forEach(fruit => {\\n  console.count(fruit)\\n})\\n\")), mdx(\"p\", null, \"Notice how the call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.countReset('orange')\"), \" resets the value counter to zero.\"), mdx(\"h2\", {\n    \"id\": \"print-the-stack-trace\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#print-the-stack-trace\",\n    \"aria-label\": \"print the stack trace permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Print the stack trace\"), mdx(\"p\", null, \"There might be cases where it's useful to print the call stack trace of a function, maybe to answer the question \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"how did you reach that part of the code?\")), mdx(\"p\", null, \"You can do so using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.trace()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const function2 = () => console.trace()\\nconst function1 = () => function2()\\nfunction1()\\n\")), mdx(\"p\", null, \"This will print the stack trace. This is what's printed if we try this in the Node.js REPL:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"Trace\\n    at function2 (repl:1:33)\\n    at function1 (repl:1:25)\\n    at repl:1:1\\n    at ContextifyScript.Script.runInThisContext (vm.js:44:33)\\n    at REPLServer.defaultEval (repl.js:239:29)\\n    at bound (domain.js:301:14)\\n    at REPLServer.runBound [as eval] (domain.js:314:12)\\n    at REPLServer.onLine (repl.js:440:10)\\n    at emitOne (events.js:120:20)\\n    at REPLServer.emit (events.js:210:7)\\n\")), mdx(\"h2\", {\n    \"id\": \"calculate-the-time-spent\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#calculate-the-time-spent\",\n    \"aria-label\": \"calculate the time spent permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Calculate the time spent\"), mdx(\"p\", null, \"You can easily calculate how much time a function takes to run, using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"time()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timeEnd()\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const doSomething = () => console.log('test')\\nconst measureDoingSomething = () => {\\n  console.time('doSomething()')\\n  //do something, and measure the time it takes\\n  doSomething()\\n  console.timeEnd('doSomething()')\\n}\\nmeasureDoingSomething()\\n\")), mdx(\"h2\", {\n    \"id\": \"stdout-and-stderr\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#stdout-and-stderr\",\n    \"aria-label\": \"stdout and stderr permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"stdout and stderr\"), mdx(\"p\", null, \"As we saw console.log is great for printing messages in the Console. This is what's called the standard output, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stdout\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.error\"), \" prints to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stderr\"), \" stream.\"), mdx(\"p\", null, \"It will not appear in the console, but it will appear in the error log.\"), mdx(\"h2\", {\n    \"id\": \"color-the-output\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#color-the-output\",\n    \"aria-label\": \"color the output permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Color the output\"), mdx(\"p\", null, \"You can color the output of your text in the console by using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gist.github.com/iamnewton/8754917\"\n  }, \"escape sequences\"), \". An escape sequence is a set of characters that identifies a color.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log('\\\\x1b[33m%s\\\\x1b[0m', 'hi!')\\n\")), mdx(\"p\", null, \"You can try that in the Node.js REPL, and it will print \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hi!\"), \" in yellow.\"), mdx(\"p\", null, \"However, this is the low-level way to do this. The simplest way to go about coloring the console output is by using a library. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/chalk/chalk\"\n  }, \"Chalk\"), \" is such a library, and in addition to coloring it also helps with other styling facilities, like making text bold, italic or underlined.\"), mdx(\"p\", null, \"You install it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install chalk\"), \", then you can use it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const chalk = require('chalk')\\nconsole.log(chalk.yellow('hi!'))\\n\")), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chalk.yellow\"), \" is much more convenient than trying to remember the escape codes, and the code is much more readable.\"), mdx(\"p\", null, \"Check the project link posted above for more usage examples.\"), mdx(\"h2\", {\n    \"id\": \"create-a-progress-bar\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#create-a-progress-bar\",\n    \"aria-label\": \"create a progress bar permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Create a progress bar\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/progress\"\n  }, \"Progress\"), \" is an awesome package to create a progress bar in the console. Install it using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install progress\")), mdx(\"p\", null, \"This snippet creates a 10-step progress bar, and every 100ms one step is completed. When the bar completes we clear the interval:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const ProgressBar = require('progress')\\n\\nconst bar = new ProgressBar(':bar', { total: 10 })\\nconst timer = setInterval(() => {\\n  bar.tick()\\n  if (bar.complete) {\\n    clearInterval(timer)\\n  }\\n}, 100)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#basic-output-using-the-console-module","title":"Basic output using the console module"},{"url":"#clear-the-console","title":"Clear the console"},{"url":"#counting-elements","title":"Counting elements"},{"url":"#reset-counting","title":"Reset counting"},{"url":"#print-the-stack-trace","title":"Print the stack trace"},{"url":"#calculate-the-time-spent","title":"Calculate the time spent"},{"url":"#stdout-and-stderr","title":"stdout and stderr"},{"url":"#color-the-output","title":"Color the output"},{"url":"#create-a-progress-bar","title":"Create a progress bar"}]},"frontmatter":{"title":"Output to the command line using Node.js","description":"How to print to the command line console using Node.js, from the basic console.log to more complex scenarios"},"fields":{"slug":"output-to-the-command-line-using-nodejs","authors":["flaviocopes"," potch"," MylesBorins"," fhemberger"," LaRuaNa"," amiller-gh"," ahmadawais"]}}},"pageContext":{"slug":"output-to-the-command-line-using-nodejs","next":{"slug":"accept-input-from-the-command-line-in-nodejs","title":"Accept input from the command line in Node.js"},"previous":{"slug":"nodejs-accept-arguments-from-the-command-line","title":"Node.js, accept arguments from the command line"},"relativePath":"0013-node-output-to-cli/index.md","category":"learn","navigationData":{"null":{"data":[{"title":"Releases","slug":"releases","section":null,"category":"releases"},{"title":"mock","slug":"/blog/0000/00/00/mock","section":null,"category":"blog"},{"title":"Installing Node.js via package manager","slug":"installing-nodejs-via-package-manager","section":null,"category":"download"},{"title":"Benchmarking","slug":"benchmarking","section":null,"category":null},{"title":"metrics","slug":"metrics","section":null,"category":null}],"category":"releases"},"Quick Start":{"data":[{"title":"Introduction to Node.js","slug":"introduction-to-nodejs","section":"Quick Start","category":"learn"},{"title":"A brief history of Node.js","slug":"a-brief-history-of-nodejs","section":"Quick Start","category":"learn"},{"title":"How to install Node.js","slug":"how-to-install-nodejs","section":"Quick Start","category":"learn"},{"title":"How much JavaScript do you need to know to use Node.js?","slug":"how-much-javascript-do-you-need-to-know-to-use-nodejs","section":"Quick Start","category":"learn"},{"title":"Differences between Node.js and the Browser","slug":"differences-between-nodejs-and-the-browser","section":"Quick Start","category":"learn"}],"category":"learn"},"Getting Started":{"data":[{"title":"The V8 JavaScript Engine","slug":"the-v8-javascript-engine","section":"Getting Started","category":"learn"},{"title":"Run Node.js scripts from the command line","slug":"run-nodejs-scripts-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"How to exit from a Node.js program","slug":"how-to-exit-from-a-nodejs-program","section":"Getting Started","category":"learn"},{"title":"How to read environment variables from Node.js","slug":"how-to-read-environment-variables-from-nodejs","section":"Getting Started","category":"learn"},{"title":"How to use the Node.js REPL","slug":"how-to-use-the-nodejs-repl","section":"Getting Started","category":"learn"},{"title":"Node.js, accept arguments from the command line","slug":"nodejs-accept-arguments-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"Output to the command line using Node.js","slug":"output-to-the-command-line-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Accept input from the command line in Node.js","slug":"accept-input-from-the-command-line-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Expose functionality from a Node.js file using exports","slug":"expose-functionality-from-a-nodejs-file-using-exports","section":"Getting Started","category":"learn"},{"title":"An introduction to the npm package manager","slug":"an-introduction-to-the-npm-package-manager","section":"Getting Started","category":"learn"},{"title":"Where does npm install the packages?","slug":"where-does-npm-install-the-packages","section":"Getting Started","category":"learn"},{"title":"How to use or execute a package installed using npm","slug":"how-to-use-or-execute-a-package-installed-using-npm","section":"Getting Started","category":"learn"},{"title":"The package.json guide","slug":"the-package-json-guide","section":"Getting Started","category":"learn"},{"title":"The package-lock.json file","slug":"the-package-lock-json-file","section":"Getting Started","category":"learn"},{"title":"Find the installed version of an npm package","slug":"find-the-installed-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Install an older version of an npm package","slug":"install-an-older-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Update all the Node.js dependencies to their latest version","slug":"update-all-the-nodejs-dependencies-to-their-latest-version","section":"Getting Started","category":"learn"},{"title":"Semantic Versioning using npm","slug":"semantic-versioning-using-npm","section":"Getting Started","category":"learn"},{"title":"Uninstalling npm packages","slug":"uninstalling-npm-packages","section":"Getting Started","category":"learn"},{"title":"npm global or local packages","slug":"npm-global-or-local-packages","section":"Getting Started","category":"learn"},{"title":"npm dependencies and devDependencies","slug":"npm-dependencies-and-devdependencies","section":"Getting Started","category":"learn"},{"title":"The npx Node.js Package Runner","slug":"the-npx-nodejs-package-runner","section":"Getting Started","category":"learn"},{"title":"The Node.js Event Loop","slug":"the-nodejs-event-loop","section":"Getting Started","category":"learn"},{"title":"Understanding process.nextTick()","slug":"understanding-process-nexttick","section":"Getting Started","category":"learn"},{"title":"Understanding setImmediate()","slug":"understanding-setimmediate","section":"Getting Started","category":"learn"},{"title":"Discover JavaScript Timers","slug":"discover-javascript-timers","section":"Getting Started","category":"learn"},{"title":"JavaScript Asynchronous Programming and Callbacks","slug":"javascript-asynchronous-programming-and-callbacks","section":"Getting Started","category":"learn"},{"title":"Understanding JavaScript Promises","slug":"understanding-javascript-promises","section":"Getting Started","category":"learn"},{"title":"Modern Asynchronous JavaScript with Async and Await","slug":"modern-asynchronous-javascript-with-async-and-await","section":"Getting Started","category":"learn"},{"title":"The Node.js Event emitter","slug":"the-nodejs-event-emitter","section":"Getting Started","category":"learn"},{"title":"Build an HTTP Server","slug":"build-an-http-server","section":"Getting Started","category":"learn"},{"title":"Making HTTP requests with Node.js","slug":"making-http-requests-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Make an HTTP POST request using Node.js","slug":"make-an-http-post-request-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Get HTTP request body data using Node.js","slug":"get-http-request-body-data-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with file descriptors in Node.js","slug":"working-with-file-descriptors-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js file stats","slug":"nodejs-file-stats","section":"Getting Started","category":"learn"},{"title":"Node.js File Paths","slug":"nodejs-file-paths","section":"Getting Started","category":"learn"},{"title":"Reading files with Node.js","slug":"reading-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Writing files with Node.js","slug":"writing-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with folders in Node.js","slug":"working-with-folders-in-nodejs","section":"Getting Started","category":"learn"},{"title":"The Node.js fs module","slug":"the-nodejs-fs-module","section":"Getting Started","category":"learn"},{"title":"The Node.js path module","slug":"the-nodejs-path-module","section":"Getting Started","category":"learn"},{"title":"The Node.js os module","slug":"the-nodejs-os-module","section":"Getting Started","category":"learn"},{"title":"The Node.js events module","slug":"the-nodejs-events-module","section":"Getting Started","category":"learn"},{"title":"The Node.js http module","slug":"the-nodejs-http-module","section":"Getting Started","category":"learn"},{"title":"Node.js Buffers","slug":"nodejs-buffers","section":"Getting Started","category":"learn"},{"title":"Node.js Streams","slug":"nodejs-streams","section":"Getting Started","category":"learn"},{"title":"Node.js, the difference between development and production","slug":"nodejs-the-difference-between-development-and-production","section":"Getting Started","category":"learn"},{"title":"Error handling in Node.js","slug":"error-handling-in-nodejs","section":"Getting Started","category":"learn"},{"title":"How to log an object in Node.js","slug":"how-to-log-an-object-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js with TypeScript","slug":"nodejs-with-typescript","section":"Getting Started","category":"learn"},{"title":"Node.js with WebAssembly","slug":"nodejs-with-webassembly","section":"Getting Started","category":"learn"}],"category":"learn"}}}},"staticQueryHashes":[]}