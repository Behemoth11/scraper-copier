{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/understanding-javascript-promises","result":{"data":{"doc":{"id":"c4bf840c-3586-5a14-a9d0-8bbbcdb166c6","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Understanding JavaScript Promises\",\n  \"description\": \"Promises are one way to deal with asynchronous code in JavaScript, without writing too many callbacks in your code.\",\n  \"authors\": \"flaviocopes, potch, MylesBorins, LaRuaNa, bdharrington7, amiller-gh, ahmadawais\",\n  \"section\": \"Getting Started\",\n  \"category\": \"learn\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction-to-promises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction-to-promises\",\n    \"aria-label\": \"introduction to promises permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction to promises\"), mdx(\"iframe\", {\n    title: \"Introduction to promises\",\n    src: \"https://stackblitz.com/edit/nodejs-dev-0006-01?index.js&zenmode=1&view=editor\",\n    alt: \"nodejs-dev-0006-01 on StackBlitz\",\n    style: {\n      \"height\": \"400px\",\n      \"width\": \"100%\",\n      \"border\": \"0\"\n    }\n  }), mdx(\"p\", null, \"A promise is commonly defined as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a proxy for a value that will eventually become available\"), \".\"), mdx(\"p\", null, \"Promises are one way to deal with asynchronous code, without getting stuck in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://callbackhell.com/\"\n  }, \"callback hell\"), \".\"), mdx(\"p\", null, \"Promises have been part of the language for years (standardized and introduced in ES2015), and have recently become more integrated, with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"async\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"await\"), \" in ES2017.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Async functions\"), \" use promises behind the scenes, so understanding how promises work is fundamental to understanding how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" work.\"), mdx(\"h3\", {\n    \"id\": \"how-promises-work-in-brief\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#how-promises-work-in-brief\",\n    \"aria-label\": \"how promises work in brief permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How promises work, in brief\"), mdx(\"p\", null, \"Once a promise has been called, it will start in a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pending state\"), \". This means that the calling function continues executing, while the promise is pending until it resolves, giving the calling function whatever data was being requested.\"), mdx(\"p\", null, \"The created promise will eventually end in a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"resolved state\"), \", or in a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rejected state\"), \", calling the respective callback functions (passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \") upon finishing.\"), mdx(\"h3\", {\n    \"id\": \"which-js-apis-use-promises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#which-js-apis-use-promises\",\n    \"aria-label\": \"which js apis use promises permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Which JS APIs use promises?\"), mdx(\"p\", null, \"In addition to your own code and libraries code, promises are used by standard modern Web APIs such as:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the Battery API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the Fetch API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Service Workers\")), mdx(\"p\", null, \"It's unlikely that in modern JavaScript you'll find yourself \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" using promises, so let's start diving right into them.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"creating-a-promise\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#creating-a-promise\",\n    \"aria-label\": \"creating a promise permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating a promise\"), mdx(\"p\", null, \"The Promise API exposes a Promise constructor, which you initialize using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Promise()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let done = true\\n\\nconst isItDoneYet = new Promise((resolve, reject) => {\\n  if (done) {\\n    const workDone = 'Here is the thing I built'\\n    resolve(workDone)\\n  } else {\\n    const why = 'Still working on something else'\\n    reject(why)\\n  }\\n})\\n\")), mdx(\"p\", null, \"As you can see, the promise checks the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"done\"), \" global constant, and if that's true, the promise goes to a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"resolved\"), \" state (since the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resolve\"), \" callback was called); otherwise, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reject\"), \" callback is executed, putting the promise in a rejected state. (If none of these functions is called in the execution path, the promise will remain in a pending state)\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resolve\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reject\"), \", we can communicate back to the caller what the resulting promise state was, and what to do with it. In the above case we just returned a string, but it could be an object, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" as well. Because we've created the promise in the above snippet, it has \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"already started executing\"), \". This is important to understand what's going on in the section \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#consuming-a-promise\"\n  }, \"Consuming a promise\"), \" below.\"), mdx(\"p\", null, \"A more common example you may come across is a technique called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Promisifying\"), \". This technique is a way to be able to use a classic JavaScript function that takes a callback, and have it return a promise:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const fs = require('fs')\\n\\nconst getFile = (fileName) => {\\n  return new Promise((resolve, reject) => {\\n    fs.readFile(fileName, (err, data) => {\\n      if (err) {\\n        reject(err)  // calling `reject` will cause the promise to fail with or without the error passed as an argument\\n        return        // and we don't want to go any further\\n      }\\n      resolve(data)\\n    })\\n  })\\n}\\n\\ngetFile('/etc/passwd')\\n.then(data => console.log(data))\\n.catch(err => console.error(err))\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In recent versions of Node.js, you won't have to do this manual conversion for a lot of the API. There is a promisifying function available in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/docs/latest-v11.x/api/util.html#util_util_promisify_original\"\n  }, \"util module\"), \" that will do this for you, given that the function you're promisifying has the correct signature.\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"consuming-a-promise\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#consuming-a-promise\",\n    \"aria-label\": \"consuming a promise permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Consuming a promise\"), mdx(\"p\", null, \"In the last section, we introduced how a promise is created.\"), mdx(\"p\", null, \"Now, let's see how the promise can be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"consumed\"), \" or used.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const isItDoneYet = new Promise(/* ... as above ... */)\\n//...\\n\\nconst checkIfItsDone = () => {\\n  isItDoneYet\\n    .then(ok => {\\n      console.log(ok)\\n    })\\n    .catch(err => {\\n      console.error(err)\\n    })\\n}\\n\")), mdx(\"p\", null, \"Running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checkIfItsDone()\"), \" will specify functions to execute when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isItDoneYet\"), \" promise resolves (in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then\"), \" call) or rejects (in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \" call).\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"chaining-promises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#chaining-promises\",\n    \"aria-label\": \"chaining promises permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Chaining promises\"), mdx(\"p\", null, \"A promise can be returned to another promise, creating a chain of promises.\"), mdx(\"p\", null, \"A great example of chaining promises is the Fetch API, which we can use to get a resource and queue a chain of promises to execute when the resource is fetched.\"), mdx(\"p\", null, \"The Fetch API is a promise-based mechanism, and calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch()\"), \" is equivalent to defining our own promise using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Promise()\"), \".\"), mdx(\"h3\", {\n    \"id\": \"example-of-chaining-promises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#example-of-chaining-promises\",\n    \"aria-label\": \"example of chaining promises permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Example of chaining promises\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const status = response => {\\n  if (response.status >= 200 && response.status < 300) {\\n    return Promise.resolve(response)\\n  }\\n  return Promise.reject(new Error(response.statusText))\\n}\\n\\nconst json = response => response.json()\\n\\nfetch('/todos.json')\\n  .then(status)    // note that the `status` function is actually **called** here, and that it **returns a promise***\\n  .then(json)      // likewise, the only difference here is that the `json` function here returns a promise that resolves with `data`\\n  .then(data => {  // ... which is why `data` shows up here as the first parameter to the anonymous function\\n    console.log('Request succeeded with JSON response', data)\\n  })\\n  .catch(error => {\\n    console.log('Request failed', error)\\n  })\\n\")), mdx(\"blockquote\", null, mdx(\"code\", null, mdx(\"a\", {\n    href: \"https://www.npmjs.com/package/node-fetch\"\n  }, \"node-fetch\")), \" is  minimal code for window.fetch compatible API on Node.js runtime.\"), mdx(\"p\", null, \"In this example, we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch()\"), \" to get a list of TODO items from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todos.json\"), \" file found in the domain root, and we create a chain of promises.\"), mdx(\"p\", null, \"Running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch()\"), \" returns a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://fetch.spec.whatwg.org/#concept-response\"\n  }, \"response\"), \", which has many properties, and within those we reference:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"status\"), \", a numeric value representing the HTTP status code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"statusText\"), \", a status message, which is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OK\"), \" if the request succeeded\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"response\"), \" also has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"json()\"), \" method, which returns a promise that will resolve with the content of the body processed and transformed into JSON.\"), mdx(\"p\", null, \"So given those promises, this is what happens: the first promise in the chain is a function that we defined, called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"status()\"), \", that checks the response status and if it's not a success response (between 200 and 299), it rejects the promise.\"), mdx(\"p\", null, \"This operation will cause the promise chain to skip all the chained promises listed and will skip directly to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch()\"), \" statement at the bottom, logging the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Request failed\"), \" text along with the error message.\"), mdx(\"p\", null, \"If that succeeds instead, it calls the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"json()\"), \" function we defined. Since the previous promise, when successful, returned the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"response\"), \" object, we get it as an input to the second promise.\"), mdx(\"p\", null, \"In this case, we return the data JSON processed, so the third promise receives the JSON directly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \".then((data) => {\\n  console.log('Request succeeded with JSON response', data)\\n})\\n\")), mdx(\"p\", null, \"and we simply log it to the console.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"handling-errors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#handling-errors\",\n    \"aria-label\": \"handling errors permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Handling errors\"), mdx(\"p\", null, \"In the example, in the previous section, we had a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \" that was appended to the chain of promises.\"), mdx(\"p\", null, \"When anything in the chain of promises fails and raises an error or rejects the promise, the control goes to the nearest \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch()\"), \" statement down the chain.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"new Promise((resolve, reject) => {\\n  throw new Error('Error')\\n}).catch(err => {\\n  console.error(err)\\n})\\n\\n// or\\n\\nnew Promise((resolve, reject) => {\\n  reject('Error')\\n}).catch(err => {\\n  console.error(err)\\n})\\n\")), mdx(\"h3\", {\n    \"id\": \"cascading-errors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cascading-errors\",\n    \"aria-label\": \"cascading errors permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Cascading errors\"), mdx(\"p\", null, \"If inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch()\"), \" you raise an error, you can append a second \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch()\"), \" to handle it, and so on.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"new Promise((resolve, reject) => {\\n  throw new Error('Error')\\n})\\n  .catch(err => {\\n    throw new Error('Error')\\n  })\\n  .catch(err => {\\n    console.error(err)\\n  })\\n\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"orchestrating-promises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#orchestrating-promises\",\n    \"aria-label\": \"orchestrating promises permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Orchestrating promises\"), mdx(\"h3\", {\n    \"id\": \"promiseall\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#promiseall\",\n    \"aria-label\": \"promiseall permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Promise.all()\")), mdx(\"p\", null, \"If you need to synchronize different promises, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.all()\"), \" helps you define a list of promises, and execute something when they are all resolved.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const f1 = fetch('/something.json')\\nconst f2 = fetch('/something2.json')\\n\\nPromise.all([f1, f2])\\n  .then(res => {\\n    console.log('Array of results', res)\\n  })\\n  .catch(err => {\\n    console.error(err)\\n  })\\n\")), mdx(\"p\", null, \"The ES2015 destructuring assignment syntax allows you to also do\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Promise.all([f1, f2]).then(([res1, res2]) => {\\n  console.log('Results', res1, res2)\\n})\\n\")), mdx(\"p\", null, \"You are not limited to using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" of course, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"any promise can be used in this fashion\"), \".\"), mdx(\"h3\", {\n    \"id\": \"promiserace\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#promiserace\",\n    \"aria-label\": \"promiserace permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Promise.race()\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.race()\"), \" runs when the first of the promises you pass to it settles (resolves or rejects), and it runs the attached callback just once, with the result of the first promise settled.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const first = new Promise((resolve, reject) => {\\n  setTimeout(resolve, 500, 'first')\\n})\\nconst second = new Promise((resolve, reject) => {\\n  setTimeout(resolve, 100, 'second')\\n})\\n\\nPromise.race([first, second]).then(result => {\\n  console.log(result) // second\\n})\\n\")), mdx(\"h3\", {\n    \"id\": \"promiseany\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#promiseany\",\n    \"aria-label\": \"promiseany permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Promise.any()\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.any()\"), \" settles when any of the promises you pass to it fulfill or all of the promises get rejected. It returns a single promise that resolves with the value from the first promise that is fulfilled. If all promises are rejected, then the returned promise is rejected with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AggregateError\"), \".\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const first = new Promise((resolve, reject) => {\\n  setTimeout(reject, 500, 'first')\\n})\\nconst second = new Promise((resolve, reject) => {\\n  setTimeout(reject, 100, 'second')\\n})\\n\\nPromise.any([first, second]).catch(error => {\\n  console.log(error) // AggregateError\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"common-errors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#common-errors\",\n    \"aria-label\": \"common errors permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Common errors\"), mdx(\"h3\", {\n    \"id\": \"uncaught-typeerror-undefined-is-not-a-promise\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#uncaught-typeerror-undefined-is-not-a-promise\",\n    \"aria-label\": \"uncaught typeerror undefined is not a promise permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Uncaught TypeError: undefined is not a promise\"), mdx(\"p\", null, \"If you get the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Uncaught TypeError: undefined is not a promise\"), \" error in the console, make sure you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Promise()\"), \" instead of just \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise()\")), mdx(\"h3\", {\n    \"id\": \"unhandledpromiserejectionwarning\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#unhandledpromiserejectionwarning\",\n    \"aria-label\": \"unhandledpromiserejectionwarning permalink\",\n    \"className\": \"autolink-headers before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"UnhandledPromiseRejectionWarning\"), mdx(\"p\", null, \"This means that a promise you called rejected, but there was no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \" used to handle the error. Add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"catch\"), \" after the offending \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then\"), \" to handle this properly.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#introduction-to-promises","title":"Introduction to promises","items":[{"url":"#how-promises-work-in-brief","title":"How promises work, in brief"},{"url":"#which-js-apis-use-promises","title":"Which JS APIs use promises?"}]},{"url":"#creating-a-promise","title":"Creating a promise"},{"url":"#consuming-a-promise","title":"Consuming a promise"},{"url":"#chaining-promises","title":"Chaining promises","items":[{"url":"#example-of-chaining-promises","title":"Example of chaining promises"}]},{"url":"#handling-errors","title":"Handling errors","items":[{"url":"#cascading-errors","title":"Cascading errors"}]},{"url":"#orchestrating-promises","title":"Orchestrating promises","items":[{"url":"#promiseall","title":"Promise.all()"},{"url":"#promiserace","title":"Promise.race()"},{"url":"#promiseany","title":"Promise.any()"}]},{"url":"#common-errors","title":"Common errors","items":[{"url":"#uncaught-typeerror-undefined-is-not-a-promise","title":"Uncaught TypeError: undefined is not a promise"},{"url":"#unhandledpromiserejectionwarning","title":"UnhandledPromiseRejectionWarning"}]}]},"frontmatter":{"title":"Understanding JavaScript Promises","description":"Promises are one way to deal with asynchronous code in JavaScript, without writing too many callbacks in your code."},"fields":{"slug":"understanding-javascript-promises","authors":["flaviocopes"," potch"," MylesBorins"," LaRuaNa"," bdharrington7"," amiller-gh"," ahmadawais"]}}},"pageContext":{"slug":"understanding-javascript-promises","next":{"slug":"modern-asynchronous-javascript-with-async-and-await","title":"Modern Asynchronous JavaScript with Async and Await"},"previous":{"slug":"javascript-asynchronous-programming-and-callbacks","title":"JavaScript Asynchronous Programming and Callbacks"},"relativePath":"0034-javascript-promises/index.md","category":"learn","navigationData":{"null":{"data":[{"title":"Releases","slug":"releases","section":null,"category":"releases"},{"title":"mock","slug":"/blog/0000/00/00/mock","section":null,"category":"blog"},{"title":"Installing Node.js via package manager","slug":"installing-nodejs-via-package-manager","section":null,"category":"download"},{"title":"Benchmarking","slug":"benchmarking","section":null,"category":null},{"title":"metrics","slug":"metrics","section":null,"category":null}],"category":"releases"},"Quick Start":{"data":[{"title":"Introduction to Node.js","slug":"introduction-to-nodejs","section":"Quick Start","category":"learn"},{"title":"A brief history of Node.js","slug":"a-brief-history-of-nodejs","section":"Quick Start","category":"learn"},{"title":"How to install Node.js","slug":"how-to-install-nodejs","section":"Quick Start","category":"learn"},{"title":"How much JavaScript do you need to know to use Node.js?","slug":"how-much-javascript-do-you-need-to-know-to-use-nodejs","section":"Quick Start","category":"learn"},{"title":"Differences between Node.js and the Browser","slug":"differences-between-nodejs-and-the-browser","section":"Quick Start","category":"learn"}],"category":"learn"},"Getting Started":{"data":[{"title":"The V8 JavaScript Engine","slug":"the-v8-javascript-engine","section":"Getting Started","category":"learn"},{"title":"Run Node.js scripts from the command line","slug":"run-nodejs-scripts-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"How to exit from a Node.js program","slug":"how-to-exit-from-a-nodejs-program","section":"Getting Started","category":"learn"},{"title":"How to read environment variables from Node.js","slug":"how-to-read-environment-variables-from-nodejs","section":"Getting Started","category":"learn"},{"title":"How to use the Node.js REPL","slug":"how-to-use-the-nodejs-repl","section":"Getting Started","category":"learn"},{"title":"Node.js, accept arguments from the command line","slug":"nodejs-accept-arguments-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"Output to the command line using Node.js","slug":"output-to-the-command-line-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Accept input from the command line in Node.js","slug":"accept-input-from-the-command-line-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Expose functionality from a Node.js file using exports","slug":"expose-functionality-from-a-nodejs-file-using-exports","section":"Getting Started","category":"learn"},{"title":"An introduction to the npm package manager","slug":"an-introduction-to-the-npm-package-manager","section":"Getting Started","category":"learn"},{"title":"Where does npm install the packages?","slug":"where-does-npm-install-the-packages","section":"Getting Started","category":"learn"},{"title":"How to use or execute a package installed using npm","slug":"how-to-use-or-execute-a-package-installed-using-npm","section":"Getting Started","category":"learn"},{"title":"The package.json guide","slug":"the-package-json-guide","section":"Getting Started","category":"learn"},{"title":"The package-lock.json file","slug":"the-package-lock-json-file","section":"Getting Started","category":"learn"},{"title":"Find the installed version of an npm package","slug":"find-the-installed-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Install an older version of an npm package","slug":"install-an-older-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Update all the Node.js dependencies to their latest version","slug":"update-all-the-nodejs-dependencies-to-their-latest-version","section":"Getting Started","category":"learn"},{"title":"Semantic Versioning using npm","slug":"semantic-versioning-using-npm","section":"Getting Started","category":"learn"},{"title":"Uninstalling npm packages","slug":"uninstalling-npm-packages","section":"Getting Started","category":"learn"},{"title":"npm global or local packages","slug":"npm-global-or-local-packages","section":"Getting Started","category":"learn"},{"title":"npm dependencies and devDependencies","slug":"npm-dependencies-and-devdependencies","section":"Getting Started","category":"learn"},{"title":"The npx Node.js Package Runner","slug":"the-npx-nodejs-package-runner","section":"Getting Started","category":"learn"},{"title":"The Node.js Event Loop","slug":"the-nodejs-event-loop","section":"Getting Started","category":"learn"},{"title":"Understanding process.nextTick()","slug":"understanding-process-nexttick","section":"Getting Started","category":"learn"},{"title":"Understanding setImmediate()","slug":"understanding-setimmediate","section":"Getting Started","category":"learn"},{"title":"Discover JavaScript Timers","slug":"discover-javascript-timers","section":"Getting Started","category":"learn"},{"title":"JavaScript Asynchronous Programming and Callbacks","slug":"javascript-asynchronous-programming-and-callbacks","section":"Getting Started","category":"learn"},{"title":"Understanding JavaScript Promises","slug":"understanding-javascript-promises","section":"Getting Started","category":"learn"},{"title":"Modern Asynchronous JavaScript with Async and Await","slug":"modern-asynchronous-javascript-with-async-and-await","section":"Getting Started","category":"learn"},{"title":"The Node.js Event emitter","slug":"the-nodejs-event-emitter","section":"Getting Started","category":"learn"},{"title":"Build an HTTP Server","slug":"build-an-http-server","section":"Getting Started","category":"learn"},{"title":"Making HTTP requests with Node.js","slug":"making-http-requests-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Make an HTTP POST request using Node.js","slug":"make-an-http-post-request-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Get HTTP request body data using Node.js","slug":"get-http-request-body-data-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with file descriptors in Node.js","slug":"working-with-file-descriptors-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js file stats","slug":"nodejs-file-stats","section":"Getting Started","category":"learn"},{"title":"Node.js File Paths","slug":"nodejs-file-paths","section":"Getting Started","category":"learn"},{"title":"Reading files with Node.js","slug":"reading-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Writing files with Node.js","slug":"writing-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with folders in Node.js","slug":"working-with-folders-in-nodejs","section":"Getting Started","category":"learn"},{"title":"The Node.js fs module","slug":"the-nodejs-fs-module","section":"Getting Started","category":"learn"},{"title":"The Node.js path module","slug":"the-nodejs-path-module","section":"Getting Started","category":"learn"},{"title":"The Node.js os module","slug":"the-nodejs-os-module","section":"Getting Started","category":"learn"},{"title":"The Node.js events module","slug":"the-nodejs-events-module","section":"Getting Started","category":"learn"},{"title":"The Node.js http module","slug":"the-nodejs-http-module","section":"Getting Started","category":"learn"},{"title":"Node.js Buffers","slug":"nodejs-buffers","section":"Getting Started","category":"learn"},{"title":"Node.js Streams","slug":"nodejs-streams","section":"Getting Started","category":"learn"},{"title":"Node.js, the difference between development and production","slug":"nodejs-the-difference-between-development-and-production","section":"Getting Started","category":"learn"},{"title":"Error handling in Node.js","slug":"error-handling-in-nodejs","section":"Getting Started","category":"learn"},{"title":"How to log an object in Node.js","slug":"how-to-log-an-object-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js with TypeScript","slug":"nodejs-with-typescript","section":"Getting Started","category":"learn"},{"title":"Node.js with WebAssembly","slug":"nodejs-with-webassembly","section":"Getting Started","category":"learn"}],"category":"learn"}}}},"staticQueryHashes":[]}