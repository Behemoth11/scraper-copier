{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/accept-input-from-the-command-line-in-nodejs","result":{"data":{"doc":{"id":"aac73026-2d79-5ad0-9f73-7b95d5642cec","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Accept input from the command line in Node.js\",\n  \"description\": \"How to make a Node.js CLI program interactive using the built-in readline Node.js module\",\n  \"authors\": \"flaviocopes, MylesBorins, fhemberger, LaRuaNa, ahmadawais\",\n  \"section\": \"Getting Started\",\n  \"category\": \"learn\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"How to make a Node.js CLI program interactive?\"), mdx(\"p\", null, \"Node.js since version 7 provides the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/api/readline.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"readline\"), \" module\"), \" to perform exactly this: get input from a readable stream such as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.stdin\"), \" stream, which during the execution of a Node.js program is the terminal input, one line at a time.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const readline = require('readline').createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n})\\n\\nreadline.question(`What's your name?`, name => {\\n  console.log(`Hi ${name}!`)\\n  readline.close()\\n})\\n\")), mdx(\"p\", null, \"This piece of code asks the username, and once the text is entered and the user presses enter, we send a greeting.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"question()\"), \" method shows the first parameter (a question) and waits for the user input. It calls the callback function once enter is pressed.\"), mdx(\"p\", null, \"In this callback function, we close the readline interface.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readline\"), \" offers several other methods, please check them out on the package documentation linked above.\"), mdx(\"p\", null, \"If you need to require a password, it's best not to echo it back, but instead show a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \" symbol.\"), mdx(\"p\", null, \"The simplest way is to use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/readline-sync\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"readline-sync\"), \" package\"), \" which is very similar in terms of the API and handles this out of the box.\"), mdx(\"p\", null, \"A more complete and abstract solution is provided by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SBoudrias/Inquirer.js\"\n  }, \"Inquirer.js package\"), \".\"), mdx(\"p\", null, \"You can install it using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install inquirer\"), \", and then you can replicate the above code like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const inquirer = require('inquirer')\\n\\nvar questions = [\\n  {\\n    type: 'input',\\n    name: 'name',\\n    message: \\\"What's your name?\\\"\\n  }\\n]\\n\\ninquirer.prompt(questions).then(answers => {\\n  console.log(`Hi ${answers['name']}!`)\\n})\\n\")), mdx(\"p\", null, \"Inquirer.js lets you do many things like asking multiple choices, having radio buttons, confirmations, and more.\"), mdx(\"p\", null, \"It's worth knowing all the alternatives, especially the built-in ones provided by Node.js, but if you plan to take CLI input to the next level, Inquirer.js is an optimal choice.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"frontmatter":{"title":"Accept input from the command line in Node.js","description":"How to make a Node.js CLI program interactive using the built-in readline Node.js module"},"fields":{"slug":"accept-input-from-the-command-line-in-nodejs","authors":["flaviocopes"," MylesBorins"," fhemberger"," LaRuaNa"," ahmadawais"]}}},"pageContext":{"slug":"accept-input-from-the-command-line-in-nodejs","next":{"slug":"expose-functionality-from-a-nodejs-file-using-exports","title":"Expose functionality from a Node.js file using exports"},"previous":{"slug":"output-to-the-command-line-using-nodejs","title":"Output to the command line using Node.js"},"relativePath":"0014-node-input-from-cli/index.md","category":"learn","navigationData":{"null":{"data":[{"title":"Releases","slug":"releases","section":null,"category":"releases"},{"title":"mock","slug":"/blog/0000/00/00/mock","section":null,"category":"blog"},{"title":"Installing Node.js via package manager","slug":"installing-nodejs-via-package-manager","section":null,"category":"download"},{"title":"Benchmarking","slug":"benchmarking","section":null,"category":null},{"title":"metrics","slug":"metrics","section":null,"category":null}],"category":"releases"},"Quick Start":{"data":[{"title":"Introduction to Node.js","slug":"introduction-to-nodejs","section":"Quick Start","category":"learn"},{"title":"A brief history of Node.js","slug":"a-brief-history-of-nodejs","section":"Quick Start","category":"learn"},{"title":"How to install Node.js","slug":"how-to-install-nodejs","section":"Quick Start","category":"learn"},{"title":"How much JavaScript do you need to know to use Node.js?","slug":"how-much-javascript-do-you-need-to-know-to-use-nodejs","section":"Quick Start","category":"learn"},{"title":"Differences between Node.js and the Browser","slug":"differences-between-nodejs-and-the-browser","section":"Quick Start","category":"learn"}],"category":"learn"},"Getting Started":{"data":[{"title":"The V8 JavaScript Engine","slug":"the-v8-javascript-engine","section":"Getting Started","category":"learn"},{"title":"Run Node.js scripts from the command line","slug":"run-nodejs-scripts-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"How to exit from a Node.js program","slug":"how-to-exit-from-a-nodejs-program","section":"Getting Started","category":"learn"},{"title":"How to read environment variables from Node.js","slug":"how-to-read-environment-variables-from-nodejs","section":"Getting Started","category":"learn"},{"title":"How to use the Node.js REPL","slug":"how-to-use-the-nodejs-repl","section":"Getting Started","category":"learn"},{"title":"Node.js, accept arguments from the command line","slug":"nodejs-accept-arguments-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"Output to the command line using Node.js","slug":"output-to-the-command-line-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Accept input from the command line in Node.js","slug":"accept-input-from-the-command-line-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Expose functionality from a Node.js file using exports","slug":"expose-functionality-from-a-nodejs-file-using-exports","section":"Getting Started","category":"learn"},{"title":"An introduction to the npm package manager","slug":"an-introduction-to-the-npm-package-manager","section":"Getting Started","category":"learn"},{"title":"Where does npm install the packages?","slug":"where-does-npm-install-the-packages","section":"Getting Started","category":"learn"},{"title":"How to use or execute a package installed using npm","slug":"how-to-use-or-execute-a-package-installed-using-npm","section":"Getting Started","category":"learn"},{"title":"The package.json guide","slug":"the-package-json-guide","section":"Getting Started","category":"learn"},{"title":"The package-lock.json file","slug":"the-package-lock-json-file","section":"Getting Started","category":"learn"},{"title":"Find the installed version of an npm package","slug":"find-the-installed-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Install an older version of an npm package","slug":"install-an-older-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Update all the Node.js dependencies to their latest version","slug":"update-all-the-nodejs-dependencies-to-their-latest-version","section":"Getting Started","category":"learn"},{"title":"Semantic Versioning using npm","slug":"semantic-versioning-using-npm","section":"Getting Started","category":"learn"},{"title":"Uninstalling npm packages","slug":"uninstalling-npm-packages","section":"Getting Started","category":"learn"},{"title":"npm global or local packages","slug":"npm-global-or-local-packages","section":"Getting Started","category":"learn"},{"title":"npm dependencies and devDependencies","slug":"npm-dependencies-and-devdependencies","section":"Getting Started","category":"learn"},{"title":"The npx Node.js Package Runner","slug":"the-npx-nodejs-package-runner","section":"Getting Started","category":"learn"},{"title":"The Node.js Event Loop","slug":"the-nodejs-event-loop","section":"Getting Started","category":"learn"},{"title":"Understanding process.nextTick()","slug":"understanding-process-nexttick","section":"Getting Started","category":"learn"},{"title":"Understanding setImmediate()","slug":"understanding-setimmediate","section":"Getting Started","category":"learn"},{"title":"Discover JavaScript Timers","slug":"discover-javascript-timers","section":"Getting Started","category":"learn"},{"title":"JavaScript Asynchronous Programming and Callbacks","slug":"javascript-asynchronous-programming-and-callbacks","section":"Getting Started","category":"learn"},{"title":"Understanding JavaScript Promises","slug":"understanding-javascript-promises","section":"Getting Started","category":"learn"},{"title":"Modern Asynchronous JavaScript with Async and Await","slug":"modern-asynchronous-javascript-with-async-and-await","section":"Getting Started","category":"learn"},{"title":"The Node.js Event emitter","slug":"the-nodejs-event-emitter","section":"Getting Started","category":"learn"},{"title":"Build an HTTP Server","slug":"build-an-http-server","section":"Getting Started","category":"learn"},{"title":"Making HTTP requests with Node.js","slug":"making-http-requests-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Make an HTTP POST request using Node.js","slug":"make-an-http-post-request-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Get HTTP request body data using Node.js","slug":"get-http-request-body-data-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with file descriptors in Node.js","slug":"working-with-file-descriptors-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js file stats","slug":"nodejs-file-stats","section":"Getting Started","category":"learn"},{"title":"Node.js File Paths","slug":"nodejs-file-paths","section":"Getting Started","category":"learn"},{"title":"Reading files with Node.js","slug":"reading-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Writing files with Node.js","slug":"writing-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with folders in Node.js","slug":"working-with-folders-in-nodejs","section":"Getting Started","category":"learn"},{"title":"The Node.js fs module","slug":"the-nodejs-fs-module","section":"Getting Started","category":"learn"},{"title":"The Node.js path module","slug":"the-nodejs-path-module","section":"Getting Started","category":"learn"},{"title":"The Node.js os module","slug":"the-nodejs-os-module","section":"Getting Started","category":"learn"},{"title":"The Node.js events module","slug":"the-nodejs-events-module","section":"Getting Started","category":"learn"},{"title":"The Node.js http module","slug":"the-nodejs-http-module","section":"Getting Started","category":"learn"},{"title":"Node.js Buffers","slug":"nodejs-buffers","section":"Getting Started","category":"learn"},{"title":"Node.js Streams","slug":"nodejs-streams","section":"Getting Started","category":"learn"},{"title":"Node.js, the difference between development and production","slug":"nodejs-the-difference-between-development-and-production","section":"Getting Started","category":"learn"},{"title":"Error handling in Node.js","slug":"error-handling-in-nodejs","section":"Getting Started","category":"learn"},{"title":"How to log an object in Node.js","slug":"how-to-log-an-object-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js with TypeScript","slug":"nodejs-with-typescript","section":"Getting Started","category":"learn"},{"title":"Node.js with WebAssembly","slug":"nodejs-with-webassembly","section":"Getting Started","category":"learn"}],"category":"learn"}}}},"staticQueryHashes":[]}