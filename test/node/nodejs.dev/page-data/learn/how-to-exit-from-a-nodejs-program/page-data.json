{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/how-to-exit-from-a-nodejs-program","result":{"data":{"doc":{"id":"f7eb263e-9c4c-5981-9796-27b7d3d555ce","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to exit from a Node.js program\",\n  \"description\": \"Learn how to terminate a Node.js app in the best possible way\",\n  \"authors\": \"flaviocopes, MylesBorins, fhemberger, LaRuaNa, jgb-solutions, ahmadawais\",\n  \"section\": \"Getting Started\",\n  \"category\": \"learn\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are various ways to terminate a Node.js application.\"), mdx(\"p\", null, \"When running a program in the console you can close it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl-C\"), \", but what we want to discuss here is programmatically exiting.\"), mdx(\"p\", null, \"Let's start with the most drastic one, and see why you're better off \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" using it.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process\"), \" core module provides a handy method that allows you to programmatically exit from a Node.js program: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.exit()\"), \".\"), mdx(\"p\", null, \"When Node.js runs this line, the process is immediately forced to terminate.\"), mdx(\"p\", null, \"This means that any callback that's pending, any network request still being sent, any filesystem access, or processes writing to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stdout\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stderr\"), \" - all is going to be ungracefully terminated right away.\"), mdx(\"p\", null, \"If this is fine for you, you can pass an integer that signals the operating system the exit code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"process.exit(1)\\n\")), mdx(\"p\", null, \"By default the exit code is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \", which means success. Different exit codes have different meaning, which you might want to use in your own system to have the program communicate to other programs.\"), mdx(\"p\", null, \"You can read more on exit codes at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/api/process.html#process_exit_codes\"\n  }, \"https://nodejs.org/api/process.html#process_exit_codes\")), mdx(\"p\", null, \"You can also set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.exitCode\"), \" property:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"process.exitCode = 1\\n\")), mdx(\"p\", null, \"and when the program ends, Node.js will return that exit code.\"), mdx(\"p\", null, \"A program will gracefully exit when all the processing is done.\"), mdx(\"p\", null, \"Many times with Node.js we start servers, like this HTTP server:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const express = require('express')\\nconst app = express()\\n\\napp.get('/', (req, res) => {\\n  res.send('Hi!')\\n})\\n\\napp.listen(3000, () => console.log('Server ready'))\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Express is a framework that uses the http module under the hood, app.listen() returns an instance of http. You would use https.createServer if you needed to serve your app using HTTPS, as app.listen only uses the http module.\")), mdx(\"p\", null, \"This program is never going to end. If you call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.exit()\"), \", any currently pending or running request is going to be aborted. This is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not nice\"), \".\"), mdx(\"p\", null, \"In this case you need to send the command a SIGTERM signal, and handle that with the process signal handler:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process\"), \" does not require a \\\"require\\\", it's automatically available.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const express = require('express')\\n\\nconst app = express()\\n\\napp.get('/', (req, res) => {\\n  res.send('Hi!')\\n})\\n\\nconst server = app.listen(3000, () => console.log('Server ready'))\\n\\nprocess.on('SIGTERM', () => {\\n  server.close(() => {\\n    console.log('Process terminated')\\n  })\\n})\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What are signals? Signals are a POSIX intercommunication system: a notification sent to a process in order to notify it of an event that occurred.\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SIGKILL\"), \" is the signal that tells a process to immediately terminate, and would ideally act like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.exit()\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SIGTERM\"), \" is the signal that tells a process to gracefully terminate. It is the signal that's sent from process managers like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upstart\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"supervisord\"), \" and many others.\"), mdx(\"p\", null, \"You can send this signal from inside the program, in another function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"process.kill(process.pid, 'SIGTERM')\\n\")), mdx(\"p\", null, \"Or from another Node.js running program, or any other app running in your system that knows the PID of the process you want to terminate.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"frontmatter":{"title":"How to exit from a Node.js program","description":"Learn how to terminate a Node.js app in the best possible way"},"fields":{"slug":"how-to-exit-from-a-nodejs-program","authors":["flaviocopes"," MylesBorins"," fhemberger"," LaRuaNa"," jgb-solutions"," ahmadawais"]}}},"pageContext":{"slug":"how-to-exit-from-a-nodejs-program","next":{"slug":"how-to-read-environment-variables-from-nodejs","title":"How to read environment variables from Node.js"},"previous":{"slug":"run-nodejs-scripts-from-the-command-line","title":"Run Node.js scripts from the command line"},"relativePath":"0008-node-terminate-program/index.md","category":"learn","navigationData":{"null":{"data":[{"title":"Releases","slug":"releases","section":null,"category":"releases"},{"title":"mock","slug":"/blog/0000/00/00/mock","section":null,"category":"blog"},{"title":"Installing Node.js via package manager","slug":"installing-nodejs-via-package-manager","section":null,"category":"download"},{"title":"Benchmarking","slug":"benchmarking","section":null,"category":null},{"title":"metrics","slug":"metrics","section":null,"category":null}],"category":"releases"},"Quick Start":{"data":[{"title":"Introduction to Node.js","slug":"introduction-to-nodejs","section":"Quick Start","category":"learn"},{"title":"A brief history of Node.js","slug":"a-brief-history-of-nodejs","section":"Quick Start","category":"learn"},{"title":"How to install Node.js","slug":"how-to-install-nodejs","section":"Quick Start","category":"learn"},{"title":"How much JavaScript do you need to know to use Node.js?","slug":"how-much-javascript-do-you-need-to-know-to-use-nodejs","section":"Quick Start","category":"learn"},{"title":"Differences between Node.js and the Browser","slug":"differences-between-nodejs-and-the-browser","section":"Quick Start","category":"learn"}],"category":"learn"},"Getting Started":{"data":[{"title":"The V8 JavaScript Engine","slug":"the-v8-javascript-engine","section":"Getting Started","category":"learn"},{"title":"Run Node.js scripts from the command line","slug":"run-nodejs-scripts-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"How to exit from a Node.js program","slug":"how-to-exit-from-a-nodejs-program","section":"Getting Started","category":"learn"},{"title":"How to read environment variables from Node.js","slug":"how-to-read-environment-variables-from-nodejs","section":"Getting Started","category":"learn"},{"title":"How to use the Node.js REPL","slug":"how-to-use-the-nodejs-repl","section":"Getting Started","category":"learn"},{"title":"Node.js, accept arguments from the command line","slug":"nodejs-accept-arguments-from-the-command-line","section":"Getting Started","category":"learn"},{"title":"Output to the command line using Node.js","slug":"output-to-the-command-line-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Accept input from the command line in Node.js","slug":"accept-input-from-the-command-line-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Expose functionality from a Node.js file using exports","slug":"expose-functionality-from-a-nodejs-file-using-exports","section":"Getting Started","category":"learn"},{"title":"An introduction to the npm package manager","slug":"an-introduction-to-the-npm-package-manager","section":"Getting Started","category":"learn"},{"title":"Where does npm install the packages?","slug":"where-does-npm-install-the-packages","section":"Getting Started","category":"learn"},{"title":"How to use or execute a package installed using npm","slug":"how-to-use-or-execute-a-package-installed-using-npm","section":"Getting Started","category":"learn"},{"title":"The package.json guide","slug":"the-package-json-guide","section":"Getting Started","category":"learn"},{"title":"The package-lock.json file","slug":"the-package-lock-json-file","section":"Getting Started","category":"learn"},{"title":"Find the installed version of an npm package","slug":"find-the-installed-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Install an older version of an npm package","slug":"install-an-older-version-of-an-npm-package","section":"Getting Started","category":"learn"},{"title":"Update all the Node.js dependencies to their latest version","slug":"update-all-the-nodejs-dependencies-to-their-latest-version","section":"Getting Started","category":"learn"},{"title":"Semantic Versioning using npm","slug":"semantic-versioning-using-npm","section":"Getting Started","category":"learn"},{"title":"Uninstalling npm packages","slug":"uninstalling-npm-packages","section":"Getting Started","category":"learn"},{"title":"npm global or local packages","slug":"npm-global-or-local-packages","section":"Getting Started","category":"learn"},{"title":"npm dependencies and devDependencies","slug":"npm-dependencies-and-devdependencies","section":"Getting Started","category":"learn"},{"title":"The npx Node.js Package Runner","slug":"the-npx-nodejs-package-runner","section":"Getting Started","category":"learn"},{"title":"The Node.js Event Loop","slug":"the-nodejs-event-loop","section":"Getting Started","category":"learn"},{"title":"Understanding process.nextTick()","slug":"understanding-process-nexttick","section":"Getting Started","category":"learn"},{"title":"Understanding setImmediate()","slug":"understanding-setimmediate","section":"Getting Started","category":"learn"},{"title":"Discover JavaScript Timers","slug":"discover-javascript-timers","section":"Getting Started","category":"learn"},{"title":"JavaScript Asynchronous Programming and Callbacks","slug":"javascript-asynchronous-programming-and-callbacks","section":"Getting Started","category":"learn"},{"title":"Understanding JavaScript Promises","slug":"understanding-javascript-promises","section":"Getting Started","category":"learn"},{"title":"Modern Asynchronous JavaScript with Async and Await","slug":"modern-asynchronous-javascript-with-async-and-await","section":"Getting Started","category":"learn"},{"title":"The Node.js Event emitter","slug":"the-nodejs-event-emitter","section":"Getting Started","category":"learn"},{"title":"Build an HTTP Server","slug":"build-an-http-server","section":"Getting Started","category":"learn"},{"title":"Making HTTP requests with Node.js","slug":"making-http-requests-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Make an HTTP POST request using Node.js","slug":"make-an-http-post-request-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Get HTTP request body data using Node.js","slug":"get-http-request-body-data-using-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with file descriptors in Node.js","slug":"working-with-file-descriptors-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js file stats","slug":"nodejs-file-stats","section":"Getting Started","category":"learn"},{"title":"Node.js File Paths","slug":"nodejs-file-paths","section":"Getting Started","category":"learn"},{"title":"Reading files with Node.js","slug":"reading-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Writing files with Node.js","slug":"writing-files-with-nodejs","section":"Getting Started","category":"learn"},{"title":"Working with folders in Node.js","slug":"working-with-folders-in-nodejs","section":"Getting Started","category":"learn"},{"title":"The Node.js fs module","slug":"the-nodejs-fs-module","section":"Getting Started","category":"learn"},{"title":"The Node.js path module","slug":"the-nodejs-path-module","section":"Getting Started","category":"learn"},{"title":"The Node.js os module","slug":"the-nodejs-os-module","section":"Getting Started","category":"learn"},{"title":"The Node.js events module","slug":"the-nodejs-events-module","section":"Getting Started","category":"learn"},{"title":"The Node.js http module","slug":"the-nodejs-http-module","section":"Getting Started","category":"learn"},{"title":"Node.js Buffers","slug":"nodejs-buffers","section":"Getting Started","category":"learn"},{"title":"Node.js Streams","slug":"nodejs-streams","section":"Getting Started","category":"learn"},{"title":"Node.js, the difference between development and production","slug":"nodejs-the-difference-between-development-and-production","section":"Getting Started","category":"learn"},{"title":"Error handling in Node.js","slug":"error-handling-in-nodejs","section":"Getting Started","category":"learn"},{"title":"How to log an object in Node.js","slug":"how-to-log-an-object-in-nodejs","section":"Getting Started","category":"learn"},{"title":"Node.js with TypeScript","slug":"nodejs-with-typescript","section":"Getting Started","category":"learn"},{"title":"Node.js with WebAssembly","slug":"nodejs-with-webassembly","section":"Getting Started","category":"learn"}],"category":"learn"}}}},"staticQueryHashes":[]}